{
	"info": {
		"_postman_id": "1280b4bb-4074-4f61-88ea-fbfd2f7804d5",
		"name": "Digitzs API",
		"description": "The Digitzs API provides a quick, painless, secure, profitable way to build merchant services into your app. Click [here](https://digitzs.com/wp-content/uploads/2019/04/API-User-Manual.pdf) to learn more about the Digitzs API, and [here](https://digitzs.com/wp-content/uploads/2019/07/Digitzs-Quick-Start-Guide.pdf) for the Digitzs Quick Start Guide.\n\n# Merchant Services\n\nYour users can open a merchant account in real time—without ever leaving your site—and process transactions immediately. You earn revenue on every sale.\n\n**No Abandonment**  \nAccount creation, payment processing, and transaction reporting all happen inside your app. Better UX = Higher Conversions\n\n**No Waiting**  \nAccounts are created in real-time and merchants can accept payments immediately. No more waiting around for approvals.\n\n**No Receivables**  \nAutomatically split the proceeds from any sale to collect your platform or marketplace fees. No more invoicing. Get your piece of the pie today.\n\n**No Nonsense**  \nMerchants pay a flat rate of 2.9% + 30¢ per transaction. No surprise fees. No gimmicks. Predictable costs make life easier.\n\n**Instant Funding**  \nMerchants can get funds instantly when a customer pays with a qualified debit card. Restrictions apply. Reserves required.\n\n**Lifetime revenue**  \nPayments are now a profit center. Earn income every time a transaction is processed. Making money while you sleep is always nice.\n\n# Headers\n\nAs a part of authentication into the Digitzs API, there are different headers that are required to successfully call functions. They are as listed below. **x-api-key**  \nThis is your API Key, provided during on-boarding\n\n**Authorization**  \nThis is your app token, generated by calling /auth/token (as described below). This token expires every hour.  \n**NOTE:** the value needs `Bearer` prepended to your app token. This is with a capital “B” and a space between Bearer and your token.\n\n**appId**  \nThis is your application ID, provided during on-boarding.\n\n# Errors\n\nStatus codes are issued by a server in response to a client’s request made to the server. They include codes from [Internet Engineering Task Force](https://www.ietf.org/) (IETF) Request for Comments (RFCs), other specifications, and some additional codes used in some common applications of the Hypertext Transfer Protocol (HTTP).\n\nThere are five status code categories. The first digit of the status code defines the class of response. The last two digits do not have any class or categorization role.\n\n1 – Informational. The request was received, continuing process.\n\n2 – Successful. The request was successfully received, understood, and accepted.\n\n3 – Redirection. There is further action necessary in order to complete the request.\n\n4 – Client Error. The request contains bad syntax or cannot be fulfilled.\n\n5 – Server Error. The server failed to fulfill an apparently valid request.\n\nClick [here](https://digitzs.com/wp-content/uploads/2019/04/API-User-Manual.pdf) to learn more about the Digitzs API.\n\n| HTTP Error Codes | Meaning |\n| --- | --- |\n| 200 - OK | The request was successful. |\n| 400 - Bad Request | The requested item does not exist. |\n| 401 - Unauthorized | An authorization header is required. |\n| 402 - Payment Required | Reserved for future use. |\n| 403 - Forbidden | The account is not authorized. |\n| 404 - Not Found | The resource cannot be found. |\n| 408 - Request Timeout | The server timed out. |\n| 409 - Conflict | Three is an editing conflict. |\n| 429 - Too Many Requests | The user has sent too many requests. |\n| 500 - Internal Server Error | There was an unexpected error. |\n| 501 - Not Implemented | The request method not recognized. |\n| 502 - Bad Gateway | The response is invalid. |\n| 503 - Service Unavailable | The server is currently unavailable. |\n| 504 - Gateway Timeout | A timely response was not received. |",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "48500547",
		"_collection_link": "https://www.postman.com/digitzsdev/workspace/digitzs-api/collection/48500547-1280b4bb-4074-4f61-88ea-fbfd2f7804d5?action=share&source=collection_link&creator=48500547"
	},
	"item": [
		{
			"name": "Authorization",
			"item": [
				{
					"name": "Create API Key",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.environment.set(\"appKey\", jsonData.data.attributes.appKey);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"auth\",\n        \"attributes\": {\n            \"appId\": \"{{appId}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/auth/key",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"auth",
								"key"
							]
						},
						"description": "Use endpoint `POST /auth/key` to get an appKey for your application. You can create a new key at any time. Creating a new key renders the old key unusable. This is required and only used for `/auth/token`.\n\n### Request\n\n| Parameter | Description |\n| --- | --- |\n| data | A key for grouping different types of API data. |\n| type | This API call type. This call must be \"auth\". |\n| attributes | A key for grouping data. |\n| appId | Supplied by Digitzs on onboarding. |\n\n### Response\n\n| Parameter | Description |\n| --- | --- |\n| data | A key for grouping different types of API data. |\n| type | This API call type. This call must be \"auth\". |\n| id | The same `x-api-key` used in the Header |\n| attributes | A key for grouping data. |\n| appKey | The key used to create an appToken with `/auth/token` |"
					},
					"response": [
						{
							"name": "auth/key",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"auth\",\n        \"attributes\": {\n            \"appId\": \"{{appId}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/auth/key",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"auth",
										"key"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "224"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Sep 2019 20:01:40 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "66d863b5-b325-408d-9aab-953b78efd37a"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "AsWZkF7dvHcFSFg="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d8e6aa3-29a9e5b66964ac97784f2a8b;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 aabd01c4a20dae837d162bd972422efc.cloudfront.net (CloudFront), 1.1 39f9e0f028321e95b5ebd1cd55661fd6.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SEA19-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SEA19"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "H_I0wkuc77yknCR1sYqiFHf4QbEi-xY6Cl-ty-wiRGu7bY_TIR57ng=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"xxxx/auth/key\"\n    },\n    \"data\": {\n        \"type\": \"auth\",\n        \"id\": \"xxxx\",\n        \"attributes\": {\n            \"appKey\": \"xxxx\"\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Create App Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status created token code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.environment.set(\"appToken\", jsonData.data.attributes.appToken);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"auth\",\n        \"attributes\": {\n            \"appKey\": \"{{appKey}}\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/auth/token",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"auth",
								"token"
							]
						},
						"description": "Use endpoint `POST /auth/token` to get a temporary appToken. You will use the token to authenticate your application’s calls to the Digitzs API. **Tokens expire after one hour.**\n\n**NOTE**: The `Authorization` header value that is created with this must be formatted \"Bearer xxxxxx\", with x's replaced with the `appToken` value.\n\n\n## Request\n\n| Parameter | Descriptoin |\n| --- | --- |\n| data | A key for grouping different types of API data. |\n| type | This API call type. This call must be \"auth\". |\n| attributes | A key for grouping data. |\n| appKey | The `appKey`value from `/auth/key` |\n\n## Response\n\n| Parameter | Description |\n| --- | --- |\n| data | A key for grouping different types of API data. |\n| type | This API call type. This call must be \"auth\". |\n| id | The same `x-api-key` used in the Header |\n| attributes | A key for grouping data. |\n| appToken | The `Authorization` header value to use for most API calls. |"
					},
					"response": [
						{
							"name": "auth/token",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"auth\",\n        \"attributes\": {\n            \"appKey\": \"{{appKey}}\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/auth/token",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"auth",
										"token"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "744"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Fri, 27 Sep 2019 20:43:30 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "92a8a768-c16c-4b1c-b90f-d7f269ca5fb0"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "AschyGexvHcF1QA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d8e7471-87ead1f4e39a1801423fc808;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 0c7df46428c45dd75d01d31cc57c5d23.cloudfront.net (CloudFront), 1.1 0b29dbae3ec4657017234abf5689a8f8.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HEL50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HEL50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "rFBISsVRU8LYvxKUDpeCeWowNI5QFWyAdmMSoQntg6nLBAeeRxp5LQ=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"xxxx/auth/token\"\n    },\n    \"data\": {\n        \"type\": \"auth\",\n        \"id\": \"xxxx\",\n        \"attributes\": {\n            \"appToken\": \"xxxx\"\n        }\n    }\n}"
						}
					]
				}
			],
			"description": "A two-part authentication and authorization process is required in order to access the Digitzs API:\n\nAuthentication. Verifying customer identity.\nAuthorization. Granting customer access.\nThe endpoints that facilitate this process are described below.\n\n| **Auth Endpoints**    |\n| --------------------- |\n| **POST**`/auth/key`   |\n| **POST**`/auth/token` |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Payments",
			"item": [
				{
					"name": "Test API-ACH payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"ACH\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"{\\\"email\\\":\\\"johndoe@john.com\\\",\\\"originIp\\\":\\\"127.0.0.1\\\",\\\"customerIp\\\":\\\"127.0.0.1\\\",\\\"rawData\\\":\\\"Lorem ipsum\\\"}\",\n            \"StandardEntryClassCode\": \"WEB\",\n            \"bank\": {\n            \t\"bankName\":\"Wells Fargo\",\n                \"accountType\": \"checking\",\n                \"accountName\": \"MegaCorp\",\n                \"accountNumber\": \"1234567\",\n                \"routingNumber\": \"026009593\"\n            },\n            \"transaction\": {\n                \"amount\": \"3635\",\n                \"currency\": \"USD\",\n                \"invoice\": \"Payment-ACH-02\"\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/payments",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "Use endpoint **POST** `/payments` to set up an ACH payment. This call does not require a customer account or a payment method token that'd be stored to that customer.\n\nRequest:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `requestId` | UUID attempt for this transaction. (Optional, UUID format required) |\n| `type` | The type of transaction. |\n| `attributes` | A key for grouping payment identification data. |\n| `paymentType` | The type of payment transaction. Must be `card`. |\n| `merchantId` | The merchant account number. |\n| `miscData` | Optional additional information to store with call (optional) |\n| StandardEntryClassCode | Must be `WEB` |\n| `bank` | A key for grouping ACH bank information |\n| `accountType` | The type of bank account (Checking or Savings). |\n| `accountName` | The first and last name of the account holder. |\n| `accountNumber` | The financial institution account number. |\n| `routingNumber` | The bank routing number. This is required if the payment method is checking or savings. Test environment requires a real routing number. |\n| `transaction` | A key for grouping payment transaction data. |\n| `amount` | The transaction amount in cents. |\n| `currency` | The three-character code. |\n| `invoice` | The invoice number for the transaction. |\n\nResponse:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `id` | The payment transaction identification code. |\n| `attributes` | A key for grouping payment identification data. |\n| `paymentType` | The type of payment transaction. |\n| `transaction` | A key for grouping payment transaction data. |\n| `amount` | The transaction amount in dollars and cents. |\n| `invoice` | The invoice number for the transaction. |"
					},
					"response": [
						{
							"name": "Test API-ACH payment",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"requestId\": \"f8d0fedd-fad0-4c53-bb8d-44a4cd28573b\",\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"ACH\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"{\\\"email\\\":\\\"johndoe@john.com\\\",\\\"originIp\\\":\\\"127.0.0.1\\\",\\\"customerIp\\\":\\\"127.0.0.1\\\",\\\"rawData\\\":\\\"Lorem ipsum\\\"}\",\n            \"StandardEntryClassCode\": \"WEB\",\n            \"bank\": {\n            \t\"bankName\":\"Wells Fargo\",\n                \"accountType\": \"checking\",\n                \"accountName\": \"MegaCorp\",\n                \"accountNumber\": \"1234567\",\n                \"routingNumber\": \"026009593\"\n            },\n            \"transaction\": {\n                \"amount\": \"3635\",\n                \"currency\": \"USD\",\n                \"invoice\": \"Payment-ACH-02\"\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/payments",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "360"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 18:20:50 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "78f0c540-fdb1-4cbc-92bb-7a5d4e754d47"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BW90XHBZvHcF48Q="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f7682-321b481c7d410f0f6a5b7afd;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 a20e81b65d2465c729ce2f6bfe539dd0.cloudfront.net (CloudFront), 1.1 86b676273517904f44af31586adb06af.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "a4n0GAr5qhDatHI2ou2LEX0a3hh5DFGb9xaGOi4FoUPdr8q3E0wTWA=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{paymentId}\",\n        \"attributes\": {\n            \"paymentType\": \"ACH\",\n            \"transaction\": {\n                \"code\": \"0\",\n                \"message\": \"Success\",\n                \"amount\": \"3635\",\n                \"currency\": \"USD\",\n                \"invoice\": \"Payment-ACH-02\"\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Test API-Token payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.environment.set(\"CardpaymentId\", jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var appToken = null;",
									"pm.sendRequest(",
									"    {",
									"        url: pm.variables.get(\"endpoint\") + \"/auth/token\",",
									"        method: 'POST',",
									"        header: 'x-api-key:' + pm.variables.get(\"apiKey\"),",
									"        body: {",
									"            mode: 'raw',",
									"            raw: {",
									"                data: {",
									"                    type: \"auth\",",
									"                    attributes: {",
									"                        \"appKey\": pm.variables.get(\"appKey\")",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }, ",
									"    function (err, response)",
									"    {",
									"        console.log(response.json());",
									"        appToken = response.json()[\"data\"][\"attributes\"][\"appToken\"];",
									"        console.log(appToken);",
									"        pm.environment.set(\"appToken\", appToken);",
									"    }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"tokenv3\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"{\\\"email\\\":\\\"johndoe@john.com\\\",\\\"originIp\\\":\\\"127.0.0.1\\\",\\\"customerIp\\\":\\\"127.0.0.1\\\",\\\"rawData\\\":\\\"Lorem ipsum\\\"}\",\n            \"token\": {\n                \"tokenId\": \"{{token}}\",\n                \"holder\": \"Tommy\",\n                \"expiry\": \"0229\",\n                \"useAVS\": true\n            },\n            \"transaction\": {\n                \"amount\": \"001\",\n                \"currency\": \"USD\",\n                \"invoice\": \"PAYMENT-TOKEN-7\"\n            },\n            \"billingAddress\": {\n                \"line1\": \"21 Jump Street\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"832044716\",\n                \"country\": \"USA\"\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/payments",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "Use endpoint **POST** `/payments` to set up a TokenEx payment. This requires a TokenEx token created from our embedded checkout to use. Contact us for integrating our embedded checkout.\n\nRequest:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `requestId` | UUID attempt for this transaction. (Optional, UUID format required) |\n| `type` | The type of transaction. |\n| `attributes` | A key for grouping payment identification data. |\n| `paymentType` | The type of payment transaction. Must be `card`. |\n| `merchantId` | The merchant account number. |\n| `miscData` | Optional additional information to store with call (optional) |\n| `token` | A key for grouping payment token information. |\n| `holder` | The first and last name on the account. |\n| `tokenId` | The Token ID retreived from the embedded checkout. |\n| `expiry` | The expiration date of the payment method. |\n| `useAVS` | True/False for requiring a ZIP match (or greater) to capture the payment. |\n| `transaction` | A key for grouping payment transaction data. |\n| `amount` | The transaction amount in cents. |\n| `currency` | The three-character code. |\n| `invoice` | The invoice number for the transaction. |\n| `billingAddress` | A key for grouping billing address data. |\n| `line1` and `line2` | The card holder’s street address. (optional but recommended) |\n| `city` | The card holder’s home city. (optional but recommended) |\n| `state` | The card holder’s home state. (optional but recommended) |\n| `zip` | The card holder’s zip or postal code. (optional, but recommended) |\n| `country` | The card holder’s home country. |\n\nResponse:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `id` | The payment transaction identification code. |\n| `attributes` | A key for grouping payment identification data. |\n| `paymentType` | The type of payment transaction. |\n| `transaction` | A key for grouping payment transaction data. |\n| `code` | The banking entity response code. |\n| `message` | The status of the transaction. |\n| `amount` | The transaction amount in dollars and cents. |\n| `invoice` | The invoice number for the transaction. |\n| `currency` | The currency used for the transaction. |\n| `authCode` | The transaction authorization code. |\n| `avsResult` | The transaction result code. |\n| `gross` | The gross transaction amount. |\n| `net` | The net transaction amount. |\n| `grossMinusNet` | The difference between the gross and net amounts. |\n| `fee` | The transaction fee. |\n| `rate` | The percentage or fixed amount of the transaction fee. |"
					},
					"response": [
						{
							"name": "Test API-Card payment",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"tokenv3\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"{\\\"email\\\":\\\"johndoe@john.com\\\",\\\"originIp\\\":\\\"127.0.0.1\\\",\\\"customerIp\\\":\\\"127.0.0.1\\\",\\\"rawData\\\":\\\"Lorem ipsum\\\"}\",\n            \"token\": {\n                \"tokenId\": \"{{token}}\",\n                \"holder\": \"Tommy\",\n                \"expiry\": \"0229\",\n                \"useAVS\": true\n            },\n            \"transaction\": {\n                \"amount\": \"001\",\n                \"currency\": \"USD\",\n                \"invoice\": \"PAYMENT-TOKEN-7\"\n            },\n            \"billingAddress\": {\n                \"line1\": \"21 Jump Street\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"832044716\",\n                \"country\": \"USA\"\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/payments",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "458"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 18:19:11 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "430b9148-9be5-473b-868b-2ab42e6d2358"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BW9khHbAPHcFmew="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f761c-c56e18381d5fa3b6e713b45d;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 01c28b52813cd0e82f810c492808b142.cloudfront.net (CloudFront), 1.1 86b676273517904f44af31586adb06af.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "fLF9gMkCWLTSqN3gfPswVgj6C-tzZCkN4_0KWVdKsIKpNwHoq5E8ww=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{paymentId}\",\n        \"attributes\": {\n            \"paymentType\": \"card\",\n            \"transaction\": {\n                \"code\": \"0\",\n                \"message\": \"Success\",\n                \"amount\": \"500\",\n                \"invoice\": \"123456\",\n                \"currency\": \"USD\",\n                \"authCode\": \"A11111\",\n                \"avsResult\": \"T\",\n                \"gross\": \"500\",\n                \"net\": \"450\",\n                \"grossMinusNet\": \"50\",\n                \"fee\": \"35\",\n                \"rate\": \"2.95\"\n            }\n        }\n    }\n}"
						},
						{
							"name": "Duplicate RequestId Error Message (With successful transaction ID)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"tokenv3\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"{\\\"email\\\":\\\"johndoe@john.com\\\",\\\"originIp\\\":\\\"127.0.0.1\\\",\\\"customerIp\\\":\\\"127.0.0.1\\\",\\\"rawData\\\":\\\"Lorem ipsum\\\"}\",\n            \"token\": {\n                \"tokenId\": \"{{token}}\",\n                \"holder\": \"Tommy\",\n                \"expiry\": \"0229\",\n                \"useAVS\": true\n            },\n            \"transaction\": {\n                \"amount\": \"001\",\n                \"currency\": \"USD\",\n                \"invoice\": \"PAYMENT-TOKEN-7\"\n            },\n            \"billingAddress\": {\n                \"line1\": \"21 Jump Street\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"832044716\",\n                \"country\": \"USA\"\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/payments",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "291"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Dec 2020 07:11:57 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "038bef89-c63b-44b9-a2e6-43bbc488beca"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "YWs5mHejPHcFtvA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5fec283d-59cac3163fa70a8e16c36c16"
								},
								{
									"key": "Via",
									"value": "1.1 208eb126ebe99fd5accb034c84a1eeca.cloudfront.net (CloudFront), 1.1 41a1988bf0eebd2eb412a5ab1f1f394e.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SFO5-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SFO5-C3"
								},
								{
									"key": "X-Cache",
									"value": "Error from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "_fiPuI6puhWG0s-EfMUwFWJVkTzrR5qiP8lTp7Sil3fNGh1pAKer3w=="
								}
							],
							"cookie": [],
							"body": "{\n    \"meta\": {},\n    \"errors\": [\n        {\n            \"status\": \"409\",\n            \"source\": {\n                \"pointer\": \"/data/requestId\"\n            },\n            \"title\": \"Duplicate transaction attempted error.\",\n            \"detail\": \"This transaction was attempted and succeeded, see the transactionID key.\"\n        }\n    ],\n    \"transactionID\": \"corsourc-dinhhuyen-718085434-2521592-1584480973-36-1609312310\"\n}"
						},
						{
							"name": "Duplicate RequestId Error Message (No successful transaction ID)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"tokenv3\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"{\\\"email\\\":\\\"johndoe@john.com\\\",\\\"originIp\\\":\\\"127.0.0.1\\\",\\\"customerIp\\\":\\\"127.0.0.1\\\",\\\"rawData\\\":\\\"Lorem ipsum\\\"}\",\n            \"token\": {\n                \"tokenId\": \"{{token}}\",\n                \"holder\": \"Tommy\",\n                \"expiry\": \"0229\",\n                \"useAVS\": true\n            },\n            \"transaction\": {\n                \"amount\": \"001\",\n                \"currency\": \"USD\",\n                \"invoice\": \"PAYMENT-TOKEN-7\"\n            },\n            \"billingAddress\": {\n                \"line1\": \"21 Jump Street\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"832044716\",\n                \"country\": \"USA\"\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/payments",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "181"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Dec 2020 07:21:44 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "9300b580-ab60-4f66-8ec6-412d5817affb"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "YWuVVHgsPHcF5KQ="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5fec2a88-7008bc4e7ee73b2a6d85d05a"
								},
								{
									"key": "Via",
									"value": "1.1 063a9ddbb93cf698306df937132cd318.cloudfront.net (CloudFront), 1.1 7efc93d7f67e563b72814c54dcdf3063.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SFO5-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SFO5-C3"
								},
								{
									"key": "X-Cache",
									"value": "Error from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "TBfX-9VEbLy9CIr7IEKwZstNV9FvP08G_UVPu3fQLwUYTRlCCwY1ow=="
								}
							],
							"cookie": [],
							"body": "{\n    \"meta\": {},\n    \"errors\": [\n        {\n            \"status\": \"409\",\n            \"source\": {\n                \"pointer\": \"/data/requestId\"\n            },\n            \"title\": \"Duplicate transaction attempted error.\",\n            \"detail\": \"This transaction was previously attempted.\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Test API-Token split payment",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.environment.set(\"CardpaymentId\", jsonData.data.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var appToken = null;",
									"pm.sendRequest(",
									"    {",
									"        url: pm.variables.get(\"endpoint\") + \"/auth/token\",",
									"        method: 'POST',",
									"        header: 'x-api-key:' + pm.variables.get(\"apiKey\"),",
									"        body: {",
									"            mode: 'raw',",
									"            raw: {",
									"                data: {",
									"                    type: \"auth\",",
									"                    attributes: {",
									"                        \"appKey\": pm.variables.get(\"appKey\")",
									"                    }",
									"                }",
									"            }",
									"        }",
									"    }, ",
									"    function (err, response)",
									"    {",
									"        console.log(response.json());",
									"        appToken = response.json()[\"data\"][\"attributes\"][\"appToken\"];",
									"        console.log(appToken);",
									"        pm.environment.set(\"appToken\", appToken);",
									"    }",
									");",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"tokenv3Split\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"{\\\"email\\\":\\\"johndoe@john.com\\\",\\\"originIp\\\":\\\"127.0.0.1\\\",\\\"customerIp\\\":\\\"127.0.0.1\\\",\\\"rawData\\\":\\\"Lorem ipsum\\\"}\",\n            \"token\": {\n                \"tokenId\": \"{{token}}\",\n                \"holder\": \"John Doe\",\n                \"expiry\": \"0229\",\n                \"useAVS\": true\n            },\n            \"transaction\": {\n                \"amount\": \"500\",\n                \"currency\": \"USD\",\n                \"invoice\": \"PAYMENT-TOKEN-7\"\n            },\n            \"split\": {\n                \"merchantId\": \"{{merchantId2}}\",\n                \"amount\": \"100\"\n            },\n            \"billingAddress\": {\n                \"line1\": \"21 Jump Street\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"83204\",\n                \"country\": \"USA\"\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/payments",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "Use endpoint **POST** `/payments` to set up a TokenEx Split payment. This requires a TokenEx token created from our embedded checkout to use. Contact us for integrating our embedded checkout.\n\nRequest:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `requestId` | UUID attempt for this transaction. (Optional, UUID format required) |\n| `type` | The type of transaction. |\n| `attributes` | A key for grouping payment identification data. |\n| `paymentType` | The type of payment transaction. Must be `card`. |\n| `merchantId` | The merchant account number. |\n| `miscData` | Optional additional information to store with call (optional) |\n| `token` | A key for grouping payment token information. |\n| `holder` | The first and last name on the account. |\n| `tokenId` | The Token ID retreived from the embedded checkout. |\n| `expiry` | The expiration date of the payment method. |\n| `useAVS` | True/False for requiring a matching ZIP (or greater address match) to capture the payment. |\n| `split` | A key for grouping the second merchant's ID and how much they will recieve on this transaction |\n| `merchantId` | The second merchant account number, this is where the split of the money will go to |\n| `amount` | The amount of money that will be split from the purchase to be sent to the 2nd merchant account |\n| `transaction` | A key for grouping payment transaction data. |\n| `amount` | The transaction amount in cents. |\n| `currency` | The three-character code. |\n| `invoice` | The invoice number for the transaction. |\n| `billingAddress` | A key for grouping billing address data. |\n| `line1` and `line2` | The card holder’s street address. (optional but recommended) |\n| `city` | The card holder’s home city. (optional but recommended) |\n| `state` | The card holder’s home state. (optional but recommended) |\n| `zip` | The card holder’s zip or postal code. (optional, but recommended) |\n| `country` | The card holder’s home country. |\n\nResponse:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `id` | The payment transaction identification code. |\n| `attributes` | A key for grouping payment identification data. |\n| `paymentType` | The type of payment transaction. |\n| `transaction` | A key for grouping payment transaction data. |\n| `code` | The banking entity response code. |\n| `message` | The status of the transaction. |\n| `amount` | The transaction amount in dollars and cents. |\n| `invoice` | The invoice number for the transaction. |\n| `currency` | The currency used for the transaction. |\n| `authCode` | The transaction authorization code. |\n| `avsResult` | The transaction result code. |\n| `gross` | The gross transaction amount. |\n| `net` | The net transaction amount. |\n| `grossMinusNet` | The difference between the gross and net amounts. |\n| `fee` | The transaction fee. |\n| `rate` | The percentage or fixed amount of the transaction fee. |"
					},
					"response": [
						{
							"name": "Test API-Card payment",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"tokenv3Split\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"{\\\"email\\\":\\\"johndoe@john.com\\\",\\\"originIp\\\":\\\"127.0.0.1\\\",\\\"customerIp\\\":\\\"127.0.0.1\\\",\\\"rawData\\\":\\\"Lorem ipsum\\\"}\",\n            \"token\": {\n                \"tokenId\": \"{{token}}\",\n                \"holder\": \"John Doe\",\n                \"expiry\": \"0229\",\n                \"useAVS\": true\n            },\n            \"transaction\": {\n                \"amount\": \"500\",\n                \"currency\": \"USD\",\n                \"invoice\": \"PAYMENT-TOKEN-7\"\n            },\n            \"split\": {\n                \"merchantId\": \"{{merchantId2}}\",\n                \"amount\": \"100\"\n            },\n            \"billingAddress\": {\n                \"line1\": \"21 Jump Street\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"83204\",\n                \"country\": \"USA\"\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/payments",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "458"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 18:19:11 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "430b9148-9be5-473b-868b-2ab42e6d2358"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BW9khHbAPHcFmew="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f761c-c56e18381d5fa3b6e713b45d;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 01c28b52813cd0e82f810c492808b142.cloudfront.net (CloudFront), 1.1 86b676273517904f44af31586adb06af.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "fLF9gMkCWLTSqN3gfPswVgj6C-tzZCkN4_0KWVdKsIKpNwHoq5E8ww=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{paymentId}\",\n        \"attributes\": {\n            \"paymentType\": \"card\",\n            \"transaction\": {\n                \"code\": \"0\",\n                \"message\": \"Success\",\n                \"amount\": \"500\",\n                \"invoice\": \"123456\",\n                \"currency\": \"USD\",\n                \"authCode\": \"A11111\",\n                \"avsResult\": \"T\",\n                \"gross\": \"500\",\n                \"net\": \"450\",\n                \"grossMinusNet\": \"50\",\n                \"fee\": \"35\",\n                \"rate\": \"2.95\"\n            }\n        }\n    }\n}"
						},
						{
							"name": "Duplicate RequestId Error Message (With successful transaction ID)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"tokenv3Split\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"{\\\"email\\\":\\\"johndoe@john.com\\\",\\\"originIp\\\":\\\"127.0.0.1\\\",\\\"customerIp\\\":\\\"127.0.0.1\\\",\\\"rawData\\\":\\\"Lorem ipsum\\\"}\",\n            \"token\": {\n                \"tokenId\": \"{{token}}\",\n                \"holder\": \"John Doe\",\n                \"expiry\": \"0229\",\n                \"useAVS\": true\n            },\n            \"transaction\": {\n                \"amount\": \"500\",\n                \"currency\": \"USD\",\n                \"invoice\": \"PAYMENT-TOKEN-7\"\n            },\n            \"split\": {\n                \"merchantId\": \"{{merchantId2}}\",\n                \"amount\": \"100\"\n            },\n            \"billingAddress\": {\n                \"line1\": \"21 Jump Street\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"83204\",\n                \"country\": \"USA\"\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/payments",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "291"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Dec 2020 07:11:57 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "038bef89-c63b-44b9-a2e6-43bbc488beca"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "YWs5mHejPHcFtvA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5fec283d-59cac3163fa70a8e16c36c16"
								},
								{
									"key": "Via",
									"value": "1.1 208eb126ebe99fd5accb034c84a1eeca.cloudfront.net (CloudFront), 1.1 41a1988bf0eebd2eb412a5ab1f1f394e.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SFO5-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SFO5-C3"
								},
								{
									"key": "X-Cache",
									"value": "Error from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "_fiPuI6puhWG0s-EfMUwFWJVkTzrR5qiP8lTp7Sil3fNGh1pAKer3w=="
								}
							],
							"cookie": [],
							"body": "{\n    \"meta\": {},\n    \"errors\": [\n        {\n            \"status\": \"409\",\n            \"source\": {\n                \"pointer\": \"/data/requestId\"\n            },\n            \"title\": \"Duplicate transaction attempted error.\",\n            \"detail\": \"This transaction was attempted and succeeded, see the transactionID key.\"\n        }\n    ],\n    \"transactionID\": \"corsourc-dinhhuyen-718085434-2521592-1584480973-36-1609312310\"\n}"
						},
						{
							"name": "Duplicate RequestId Error Message (No successful transaction ID)",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"tokenv3Split\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"{\\\"email\\\":\\\"johndoe@john.com\\\",\\\"originIp\\\":\\\"127.0.0.1\\\",\\\"customerIp\\\":\\\"127.0.0.1\\\",\\\"rawData\\\":\\\"Lorem ipsum\\\"}\",\n            \"token\": {\n                \"tokenId\": \"{{token}}\",\n                \"holder\": \"John Doe\",\n                \"expiry\": \"0229\",\n                \"useAVS\": true\n            },\n            \"transaction\": {\n                \"amount\": \"500\",\n                \"currency\": \"USD\",\n                \"invoice\": \"PAYMENT-TOKEN-7\"\n            },\n            \"split\": {\n                \"merchantId\": \"{{merchantId2}}\",\n                \"amount\": \"100\"\n            },\n            \"billingAddress\": {\n                \"line1\": \"21 Jump Street\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"83204\",\n                \"country\": \"USA\"\n            }\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/payments",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"status": "Conflict",
							"code": 409,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "181"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Wed, 30 Dec 2020 07:21:44 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "9300b580-ab60-4f66-8ec6-412d5817affb"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "YWuVVHgsPHcF5KQ="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5fec2a88-7008bc4e7ee73b2a6d85d05a"
								},
								{
									"key": "Via",
									"value": "1.1 063a9ddbb93cf698306df937132cd318.cloudfront.net (CloudFront), 1.1 7efc93d7f67e563b72814c54dcdf3063.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SFO5-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "SFO5-C3"
								},
								{
									"key": "X-Cache",
									"value": "Error from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "TBfX-9VEbLy9CIr7IEKwZstNV9FvP08G_UVPu3fQLwUYTRlCCwY1ow=="
								}
							],
							"cookie": [],
							"body": "{\n    \"meta\": {},\n    \"errors\": [\n        {\n            \"status\": \"409\",\n            \"source\": {\n                \"pointer\": \"/data/requestId\"\n            },\n            \"title\": \"Duplicate transaction attempted error.\",\n            \"detail\": \"This transaction was previously attempted.\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Test API-Second split",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"    pm.environment.set(\"splitpaymentId\", jsonData.data.id);",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"secondSplit\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"testData\",\n            \"split\": {\n                \"merchantId\": \"{{merchantId2}}\",\n                \"amount\": \"100\"\n            },\n            \"originalTransaction\": {\n                \"id\": \"{{originalSplitId}}\"\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/payments",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "Use endpoint **POST** `/payments` to perform a second split on an existing transaction.\n\nRequest:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `attributes` | A key for grouping payment identification data. |\n| `paymentType` | The type of payment transaction. Must be `secondSplit`. |\n| `merchantId` | The merchant account number from the original transaction. |\n| `miscData` | Optional additional information to store with call (optional) |\n| `split` | A key for grouping the second merchant's ID and how much they will recieve on this transaction |\n| `merchantId` | The second merchant account number, this is where the split of the money will go to |\n| `amount` | The amount of money that will be split from the purchase to be sent to the 2nd merchant account |\n| `originalTransaction` | A key for grouping payment transaction data. |\n| `id` | The payment ID of the original transaction to be split |\n\nResponse:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `id` | The payment transaction identification code. |\n| `attributes` | A key for grouping payment identification data. |\n| `paymentType` | The type of payment transaction. |\n| `merchantId` | The merchant ID where the split of the money will go to |\n| `transaction` | A key for grouping payment transaction data. |\n| `code` | The banking entity response code. |\n| `message` | The status of the transaction. |\n| `amount` | The transaction amount in dollars and cents. |"
					},
					"response": [
						{
							"name": "Test API-Card second split payment",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"secondSplit\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"miscData\": \"testData\",\n            \"split\": {\n                \"merchantId\": \"{{merchantId2}}\",\n                \"amount\": \"100\"\n            },\n            \"originalTransaction\": {\n                \"id\": \"{{originalSplitId}}\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{endpoint}}/payments",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "387"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 18:30:34 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "f0ba48f4-77b8-4b68-ab9b-68b9f99565a5"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BW_PnHB4vHcF16Q="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f78ca-580136d89823cc904ee23268;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 e8afb729a4bc6f5676d32307ea14bdae.cloudfront.net (CloudFront), 1.1 86b676273517904f44af31586adb06af.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "3TCYTRt81nax7G2h6FrpEBTrBLyJvdRO9r643evYnRsBwVJJkSzP6g=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{splitId}\",\n        \"attributes\": {\n            \"paymentType\": \"secondSplit\",\n            \"merchantId\": \"{merchant3Id}\",\n            \"transaction\": {\n                \"code\": \"0\",\n                \"message\": \"Success\",\n                \"amount\": \"100\"\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Test API-Payment refund/void",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"miscData\": \"Customer Initiated Refund\",\n            \"paymentType\": \"cardRefund\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"transaction\": {\n                \"amount\": \"500\",\n                \"currency\": \"USD\",\n                \"invoice\": \"123456\"\n            },\n            \"originalTransaction\": {\n                \"id\": \"{{cardpaymentId}}\"\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/payments",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "Use endpoint **POST** `/payments` to refund a payment.\n\nIf transaction is elgible to be voided, this will perform a void instead.\n\nVoidable transaction requirements:\n* Card Transactions: Can be voided before 11:59PM PST of the same day\n* ACH Transactions: **Please avoid this call**. ACH transactions are batched multiple times per day at unspecified intervals, and cannot be voided after a batch. **ACH Refunds CAN still be disputed after a refund**, leaving the merchant susceptible to paying the customer back twice. Please understand this risk, and be careful when refunding ACH transactions.\n\nRequest:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `attributes` | A key for grouping payment identification data. |\n| `miscData` | Additional data to store along the call (optional) |\n| `paymentType` | The type of payment transaction. Must be `cardRefund`. |\n| `merchantId` | The merchant account number. |\n| `transaction` | A key for grouping payment transaction data. |\n| `amount` | The transaction amount in cents. |\n| `currency` | The three-character code. |\n| `invoice` | The invoice number for the transaction. |\n| `originalTransaction` | A key for grouping the ID of the original payment to be refunded |\n| `id` | The transaction ID to refund |\n\nResponse:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `id` | The payment transaction identification code. |\n| `attributes` | A key for grouping payment identification data. |\n| `paymentType` | The type of payment transaction. |\n| `transaction` | A key for grouping payment transaction data. |\n| `code` | The banking entity response code. |\n| `message` | The status of the transaction. |\n| `amount` | The transaction amount in dollars and cents. |\n| `invoice` | The invoice number for the transaction. |\n| `currency` | The currency used for the transaction. |"
					},
					"response": [
						{
							"name": "Test API-Card payment refund",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"miscData\": \"Customer Initiated Refund\",\n            \"paymentType\": \"cardRefund\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"transaction\": {\n                \"amount\": \"500\",\n                \"currency\": \"USD\",\n                \"invoice\": \"123456\"\n            },\n            \"originalTransaction\": {\n                \"id\": \"{{cardpaymentId}}\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{endpoint}}/payments",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "358"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 18:40:37 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "413421b8-acfc-4889-b81e-7557a5c9ae13"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BXAtyHHcvHcFs3A="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f7b24-80d9ddc0bee5b4707c657390;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 0c96ded7ff282d2dbcf47c918b6bb501.cloudfront.net (CloudFront), 1.1 c7c3cdef911c9ee3c1a83a78f425dc5b.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "zxBQAizyY5hdPtIKrnWjBJNrGFMUSBB2ETvfobv3z6SocpEJcVdp6A=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"{paymentId}\",\n        \"attributes\": {\n            \"paymentType\": \"cardRefund\",\n            \"transaction\": {\n                \"code\": \"0\",\n                \"message\": \"Success\",\n                \"amount\": \"500\",\n                \"invoice\": \"123456\",\n                \"currency\": \"USD\"\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Test API-Split refund",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n        \t\"miscData\": \"a note\",\n            \"paymentType\": \"cardSplitRefund\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"split\": {\n                \"merchantId\": \"{{merchantId2}}\",\n                \"amount\": \"000\"\n            },\n            \"transaction\": {\n                \"amount\": \"500\",\n                \"currency\": \"USD\",\n                \"invoice\": \"123456\"\n            },\n            \"originalSplit\": {\n                \"id\": \"{{splitpaymentId}}\"\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/payments",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"payments"
							]
						},
						"description": "Use endpoint **POST** `/payments` to refund the split of a payment.\n\nRequest:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `attributes` | A key for grouping payment identification data. |\n| `miscData` | Additional data to store along the call (optional) |\n| `paymentType` | The type of payment transaction. Must be `cardSplitRefund`. |\n| `merchantId` | The merchant account number. |\n| `split` | A key for grouping the second merchant's ID |\n| `merchantId` | The second merchant account number, this is where the split of the money had gone to |\n| `amount` | **Set to \"000\" for the time being.** |\n| `transaction` | A key for grouping payment transaction data. |\n| `amount` | The transaction amount in cents. |\n| `currency` | The three-character code. |\n| `invoice` | The invoice number for the transaction. |\n| `originalSplit` | A key for grouping the ID of the original payment to be refunded |\n| `id` | The transaction ID to refund |\n\nResponse:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `id` | The payment transaction identification code. |\n| `attributes` | A key for grouping payment identification data. |\n| `paymentType` | The type of payment transaction. |\n| `transaction` | A key for grouping payment transaction data. |\n| `code` | The banking entity response code. |\n| `message` | The status of the transaction. |\n| `amount` | The transaction amount in dollars and cents. |\n| `invoice` | The invoice number for the transaction. |\n| `currency` | The currency used for the transaction. |"
					},
					"response": [
						{
							"name": "Test API-Split refund",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"payments\",\n        \"attributes\": {\n            \"paymentType\": \"cardSplitRefund\",\n            \"merchantId\": \"{{merchantId}}\",\n            \"split\": {\n                \"merchantId\": \"{{merchantId2}}\",\n                \"amount\": \"000\"\n            },\n            \"transaction\": {\n                \"amount\": \"500\",\n                \"currency\": \"USD\",\n                \"invoice\": \"123456\"\n            },\n            \"originalSplit\": {\n                \"id\": \"{{splitpaymentId}}\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{endpoint}}/payments",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "363"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Mon, 14 Oct 2019 06:50:21 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "fcfbfb11-5ac1-4b61-863b-04b99491ad3c"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "Bika-HiWvHcFeDg="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5da41aac-f94c7dc4baf023bcc626726c;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 01c28b52813cd0e82f810c492808b142.cloudfront.net (CloudFront), 1.1 7de3eef800cf24f49094394d8b5e8d1a.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO51-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "0u_C-gnJ8k49b6gmUCEfsYTDmBSl41JHeJjxIhmcH-sdib_F82-LHw=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"type\": \"payments\",\n        \"id\": \"refundId\",\n        \"attributes\": {\n            \"paymentType\": \"cardSplitRefund\",\n            \"transaction\": {\n                \"code\": \"0\",\n                \"message\": \"Success\",\n                \"amount\": \"500\",\n                \"invoice\": \"123456\",\n                \"currency\": \"USD\"\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Test API-Get payment by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding"
							}
						],
						"url": {
							"raw": "{{endpoint}}/payments/{{cardpaymentId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"payments",
								"{{cardpaymentId}}"
							]
						},
						"description": "Use endpoint **GET** `/payments/{paymentId}` to retrieve data from an existing transaction\n\n**Note**: There are no request parameters for this endpoint, besides the paymentId in the URI.\n\nResponse:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `id` | The payment transaction identification code. |\n| `attributes` | A key for grouping payment identification data. |\n| `merchantId` | The merchant ID that this transaction belongs  to |\n| `created` | The time/date when this transaction was created |\n| `miscData` | Additional information that was stored with transaction |\n| `billingAddress` | A key for grouping billing address data. |\n| `line1` and `line2` | The card holder’s street address. |\n| `city` | The card holder’s home city. |\n| `state` | The card holder’s home state. |\n| `zip` | The card holder’s zip or postal code. |\n| `country` | The card holder’s home country. |\n| `transaction` | A key for grouping payment transaction data. |\n| `code` | The banking entity response code. |\n| `message` | The status of the transaction. |\n| `amount` | The transaction amount in dollars and cents. |\n| `invoice` | The invoice number for the transaction. |\n| `currency` | The currency used for the transaction. |\n| `authCode` | The transaction authorization code. |\n| `avsResult` | The transaction result code. |\n| `gross` | The gross transaction amount. |\n| `net` | The net transaction amount. |\n| `grossMinusNet` | The difference between the gross and net amounts. |\n| `fee` | The transaction fee. |\n| `rate` | The percentage or fixed amount of the transaction fee. |\n| `card` | A key for grouping payment card information. |\n| `holder` | The first and last name on the account. |\n| `number` | The unique number assigned to an account. |\n| `expiry` | The expiration date of the payment method. |\n| `code` | The three-character CVV2 code. |\n| `paymentType` | The type of payment (card, ach, token, ...) |\n| `type` | Type of call, will always be `payments` |"
					},
					"response": [
						{
							"name": "Test API-Get payment by Id",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding"
									}
								],
								"url": {
									"raw": "{{endpoint}}/payments/{{cardpaymentId}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments",
										"{{cardpaymentId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "855"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 18:59:50 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "2d7f6191-0b1f-4945-890f-0ea5b8d85194"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BXDh0FfkvHcFWvg="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f7fa5-1df25eb0394e1908df4b6a10;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 8dbfaf7df256a75768461d934659b6b3.cloudfront.net (CloudFront), 1.1 4dde8ec6d6c12741888c2d3a059d4a2f.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "h-My-W_DtMn87fl9d80HsRYg66mU8ceHY-TDj4oYXnN4hMJUO6MYtQ=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"id\": \"{paymentId}\",\n        \"attributes\": {\n            \"merchantId\": \"{merchantId}\",\n            \"created\": \"2019-10-10T18:49:35.311Z\",\n            \"miscData\": \"test note\",\n            \"billingAddress\": {\n                \"zip\": \"90210\",\n                \"country\": \"USA\",\n                \"state\": \"CA\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"line1\": \"21 Jump Street\"\n            },\n            \"transaction\": {\n                \"amount\": \"500\",\n                \"code\": \"0\",\n                \"authCode\": \"A11111\",\n                \"avsResult\": \"T\",\n                \"gross\": \"500\",\n                \"rate\": \"2.95\",\n                \"fee\": \"35\",\n                \"currency\": \"USD\",\n                \"invoice\": \"123456\",\n                \"message\": \"Success\",\n                \"net\": \"450\",\n                \"grossMinusNet\": \"50\"\n            },\n            \"card\": {\n                \"number\": \"xxxx1685\",\n                \"holder\": \"Jane Doe\",\n                \"expiry\": \"0220\",\n                \"code\": \"xxx\"\n            },\n            \"paymentType\": \"card\"\n        },\n        \"type\": \"payments\"\n    }\n}"
						},
						{
							"name": "Test API-Get payment by Id with ACH transaction",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding"
									}
								],
								"url": {
									"raw": "{{endpoint}}/payments/{{cardpaymentId}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments",
										"{{cardpaymentId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "628"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 19:06:14 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "58339c6e-e80c-4f62-8d30-8aaefea0dc46"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BXEeBF22vHcFeUg="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f8126-9c9df2008bb05b006c541c80;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 5970fc402458c01688529eb3dab967de.cloudfront.net (CloudFront), 1.1 1b0911478686968732f973d6e5e31d11.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO51-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "6_C2SB3UiQKtv_8nX6cOXAYsmxuXoxeygBJnahBXIDb6nJKv3kwtIA=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"id\": \"{paymentId}\",\n        \"attributes\": {\n            \"bank\": {\n                \"routingNumber\": \"xxxx9593\",\n                \"bankName\": \"Wells Fargo\",\n                \"accountNumber\": \"xxxx4567\",\n                \"accountName\": \"MegaCorp\",\n                \"accountType\": \"checking\"\n            },\n            \"merchantId\": \"{merchantId}\",\n            \"StandardEntryClassCode\": \"WEB\",\n            \"transaction\": {\n                \"amount\": \"3635\",\n                \"currency\": \"USD\",\n                \"invoice\": \"Payment-ACH-02\",\n                \"code\": \"0\",\n                \"message\": \"Success\"\n            },\n            \"created\": \"2019-10-10T19:05:58.955Z\",\n            \"paymentType\": \"ACH\"\n        },\n        \"type\": \"payments\"\n    }\n}"
						}
					]
				},
				{
					"name": "Test API-Get payment status by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding"
							}
						],
						"url": {
							"raw": "{{endpoint}}/payments/status/{{cardpaymentId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"payments",
								"status",
								"{{cardpaymentId}}"
							]
						},
						"description": "Use endpoint **GET** `/payments/{paymentId}` to retrieve data from an existing transaction\n\n**Note**: There are no request parameters for this endpoint, besides the paymentId in the URI.\n\nResponse:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. |\n| `type` | The type of transaction. |\n| `id` | The payment transaction identification code. |\n| `attributes` | A key for grouping payment identification data. |\n| `merchantId` | The merchant ID that this transaction belongs  to |\n| `created` | The time/date when this transaction was created |\n| `miscData` | Additional information that was stored with transaction |\n| `billingAddress` | A key for grouping billing address data. |\n| `line1` and `line2` | The card holder’s street address. |\n| `city` | The card holder’s home city. |\n| `state` | The card holder’s home state. |\n| `zip` | The card holder’s zip or postal code. |\n| `country` | The card holder’s home country. |\n| `transaction` | A key for grouping payment transaction data. |\n| `code` | The banking entity response code. |\n| `message` | The status of the transaction. |\n| `amount` | The transaction amount in dollars and cents. |\n| `invoice` | The invoice number for the transaction. |\n| `currency` | The currency used for the transaction. |\n| `authCode` | The transaction authorization code. |\n| `avsResult` | The transaction result code. |\n| `gross` | The gross transaction amount. |\n| `net` | The net transaction amount. |\n| `grossMinusNet` | The difference between the gross and net amounts. |\n| `fee` | The transaction fee. |\n| `rate` | The percentage or fixed amount of the transaction fee. |\n| `card` | A key for grouping payment card information. |\n| `holder` | The first and last name on the account. |\n| `number` | The unique number assigned to an account. |\n| `expiry` | The expiration date of the payment method. |\n| `code` | The three-character CVV2 code. |\n| `paymentType` | The type of payment (card, ach, token, ...) |\n| `type` | Type of call, will always be `payments` |"
					},
					"response": [
						{
							"name": "Test API-Get payment status by Id",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding"
									}
								],
								"url": {
									"raw": "{{endpoint}}/payments/status/{{cardpaymentId}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments",
										"status",
										"{{cardpaymentId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "254"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Wed, 29 Jan 2020 17:13:54 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "c49a18ba-7448-442f-99f3-c9fb1f24e66e"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "HEqEzGknvHcFTbw="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5e31bd51-342a14bc50ad639cca9923dc;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 a8d6fe7391dc1997a312e8d585f06951.cloudfront.net (CloudFront), 1.1 4ae61d6633a78146395843c794041c7c.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "TLV50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "TLV50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "W3tUCtyXWzXKhfDGP9ielizV7t2fXQxm2Tvbum96Okysf9U-di_IJQ=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"\"\n    },\n    \"data\": {\n        \"id\": \"paymentId\",\n        \"txnStatus\": \"CCDebitPending\",\n        \"type\": \"payments\"\n    }\n}"
						}
					]
				},
				{
					"name": "Test API-Get payment List for Merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding"
							}
						],
						"url": {
							"raw": "{{endpoint}}/payments?limit=25&id={{merchantId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"payments"
							],
							"query": [
								{
									"key": "limit",
									"value": "25",
									"description": "Limit's the amount of items that can be returned"
								},
								{
									"key": "id",
									"value": "{{merchantId}}",
									"description": "The merchantId to query results by"
								}
							]
						},
						"description": "Use endpoint **GET** `/payments` to retrieve a list of transactions\n\n**Note**: There are no request parameters for this endpoint, besides the merchantId in the URI.\n\nResponse:\n(Refer to GET Payment by ID's possible responses for individual object details). Data is an array of payment objects, under the specified merchantId."
					},
					"response": [
						{
							"name": "Test API-Get payment List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding"
									}
								],
								"url": {
									"raw": "{{endpoint}}/payments?limit=25&id={{merchantId}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"payments"
									],
									"query": [
										{
											"key": "limit",
											"value": "25",
											"description": "Limit's the amount of items that can be returned"
										},
										{
											"key": "id",
											"value": "{{merchantId}}",
											"description": "The merchantId to query results by"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "11361"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 19:07:18 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "eeb9cef3-72d6-4e5a-a2a6-be876d62d08b"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BXEnxFRLvHcF6AQ="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f8164-c374f323dbcd01ee2ead5636;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 3cc149abcbd8cb50553c09666247bcfa.cloudfront.net (CloudFront), 1.1 1b0911478686968732f973d6e5e31d11.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO51-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "IY1anzAwGgYYV3OowVVL28y8K641tTZRceJnXyVNtywicQmTuUUFvQ=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\",\n        \"next\": \"x\", \"note\": \"URL to call for next set\"\n    },\n    \"meta\": {\n        \"items\": 25,\n        \"count\": 26,\n        \"limit\": \"25\",\n        \"more\": true\n    },\n    \"data\": [\n        {\n            \"id\": \"paymentIdWithBank\",\n            \"attributes\": {\n                \"bank\": {\n                    \"routingNumber\": \"xxxx9593\",\n                    \"bankName\": \"Wells Fargo\",\n                    \"accountNumber\": \"xxxx4567\",\n                    \"accountName\": \"MegaCorp\",\n                    \"accountType\": \"checking\"\n                },\n                \"created\": \"2019-10-10T19:05:58.955Z\",\n                \"merchantId\": \"merchantId\",\n                \"paymentType\": \"ACH\",\n                \"transaction\": {\n                    \"amount\": \"3635\",\n                    \"currency\": \"USD\",\n                    \"invoice\": \"Payment-ACH-02\",\n                    \"code\": \"0\",\n                    \"message\": \"Success\"\n                }\n            },\n            \"type\": \"payments\"\n        },\n        {\n            \"id\": \"VoidId\",\n            \"attributes\": {\n                \"created\": \"2019-10-10T18:49:55.628Z\",\n                \"merchantId\": \"merchantId\",\n                \"paymentType\": \"void\",\n                \"transaction\": {\n                    \"amount\": \"500\",\n                    \"currency\": \"USD\",\n                    \"code\": \"0\",\n                    \"invoice\": \"123456\",\n                    \"message\": \"Success\"\n                }\n            },\n            \"type\": \"payments\"\n        },\n        {\n            \"id\": \"cardPaymentId\",\n            \"attributes\": {\n                \"billingAddress\": {\n                    \"zip\": \"90210\",\n                    \"country\": \"USA\",\n                    \"state\": \"CA\",\n                    \"line2\": \"Suite 007\",\n                    \"city\": \"Los Angeles\",\n                    \"line1\": \"21 Jump Street\"\n                },\n                \"card\": {\n                    \"number\": \"xxxx1685\",\n                    \"holder\": \"Jane Doe\",\n                    \"expiry\": \"0220\",\n                    \"code\": \"xxx\"\n                },\n                \"created\": \"2019-10-10T18:49:35.311Z\",\n                \"merchantId\": \"merchantId\",\n                \"paymentType\": \"card\",\n                \"transaction\": {\n                    \"amount\": \"500\",\n                    \"code\": \"0\",\n                    \"authCode\": \"A11111\",\n                    \"avsResult\": \"T\",\n                    \"gross\": \"500\",\n                    \"rate\": \"2.95\",\n                    \"fee\": \"35\",\n                    \"currency\": \"USD\",\n                    \"invoice\": \"123456\",\n                    \"message\": \"Success\",\n                    \"net\": \"450\",\n                    \"grossMinusNet\": \"50\"\n                }\n            },\n            \"type\": \"payments\"\n        },\n        {\n            \"id\": \"cardSplitId\",\n            \"attributes\": {\n                \"card\": {\n                    \"number\": \"xxxx4426\",\n                    \"holder\": \"Dinh Huyen\",\n                    \"expiry\": \"1299\",\n                    \"code\": \"xxx\"\n                },\n                \"created\": \"2019-10-10T18:45:05.688Z\",\n                \"merchantId\": \"merchantId\",\n                \"paymentType\": \"cardSplit\",\n                \"transaction\": {\n                    \"amount\": \"500\",\n                    \"code\": \"0\",\n                    \"authCode\": \"A11111\",\n                    \"avsResult\": \"T\",\n                    \"currency\": \"USD\",\n                    \"invoice\": \"123456\",\n                    \"message\": \"Success\"\n                }\n            },\n            \"type\": \"payments\"\n        },\n        {\n            \"id\": \"cardRefundId\",\n            \"attributes\": {\n                \"created\": \"2019-10-10T18:40:37.793Z\",\n                \"merchantId\": \"merchantId\",\n                \"paymentType\": \"cardRefund\",\n                \"transaction\": {\n                    \"amount\": \"500\",\n                    \"currency\": \"USD\",\n                    \"code\": \"0\",\n                    \"invoice\": \"123456\",\n                    \"message\": \"Success\"\n                }\n            },\n            \"type\": \"payments\"\n        },\n        {\n            \"id\": \"secondSplitId\",\n            \"attributes\": {\n                \"created\": \"2019-10-10T18:30:34.906Z\",\n                \"merchantId\": \"merchantId\",\n                \"paymentType\": \"secondSplit\",\n                \"transaction\": {\n                    \"message\": \"Success\",\n                    \"amount\": \"100\",\n                    \"code\": \"0\"\n                }\n            },\n            \"type\": \"payments\"\n        },\n        {\n            \"id\": \"tokenSplitId\",\n            \"attributes\": {\n                \"created\": \"2019-10-10T18:29:13.447Z\",\n                \"merchantId\": \"merchantId\",\n                \"paymentType\": \"tokenSplit\",\n                \"transaction\": {\n                    \"amount\": \"15000\",\n                    \"currency\": \"USD\",\n                    \"codeResult\": \"NotPresent\",\n                    \"invoice\": \"123456\",\n                    \"authCode\": \"A11111\"\n                }\n            },\n            \"type\": \"payments\"\n        },\n        {\n            \"id\": \"TokenPaymentId\",\n            \"attributes\": {\n                \"created\": \"2019-10-10T18:24:01.141Z\",\n                \"merchantId\": \"merchantId\",\n                \"paymentType\": \"token\",\n                \"transaction\": {\n                    \"amount\": \"001\",\n                    \"code\": \"0\",\n                    \"authCode\": null,\n                    \"gross\": null,\n                    \"rate\": null,\n                    \"fee\": null,\n                    \"currency\": \"USD\",\n                    \"codeResult\": \"NotPresent\",\n                    \"invoice\": \"PAYMENT-TOKEN-7\",\n                    \"message\": \"Success\",\n                    \"net\": null,\n                    \"grossMinusNet\": null\n                }\n            },\n            \"type\": \"payments\"\n        },\n        {\n            \"id\": \"ACHPaymentId\",\n            \"attributes\": {\n                \"bank\": {\n                    \"routingNumber\": \"xxxx9593\",\n                    \"bankName\": \"Wells Fargo\",\n                    \"accountNumber\": \"xxxx4567\",\n                    \"accountName\": \"MegaCorp\",\n                    \"accountType\": \"checking\"\n                },\n                \"created\": \"2019-10-10T18:20:50.905Z\",\n                \"merchantId\": \"merchantId\",\n                \"paymentType\": \"ACH\",\n                \"transaction\": {\n                    \"amount\": \"3635\",\n                    \"currency\": \"USD\",\n                    \"invoice\": \"Payment-ACH-02\",\n                    \"code\": \"0\",\n                    \"message\": \"Success\"\n                }\n            },\n            \"type\": \"payments\"\n        }\n    ]\n}"
						}
					]
				}
			],
			"description": "Use the payment endpoints to accept online and mobile payments.\n\nList Payments. Used to obtain a list of merchant payments.\nCreate Payment. Used to perform payment transactions.\nRetrieve Payment. Used to find information about a specific payment.\nEach of these endpoints is described below.\n\nFor information regarding AVS, see [this](https://drive.google.com/file/d/1fst6_j0GvyN0M7ogP54LRAiAWtJxixYp/view?usp=sharing)\n\n| **Payment Endpoints**     |\n| ------------------------- |\n| **GET**  `/payments`      |\n| **POST** `/payments`      |\n| **GET**  `/payments/{id}` |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Merchants",
			"item": [
				{
					"name": "Test API-Create Merchant",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"pm.environment.set(\"merchantid\", jsonData.data.id);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"merchants\",\n        \"attributes\": {\n        \t\"AVS\": \"Standard\",\n            \"accountType\": \"business\",\n            \"accountName\": \"Huyen Dinh\",\n            \"miscData\": \"\",\n            \"personalInfo\": {\n                \"firstName\": \"Huyen\",\n                \"lastName\": \"Dinh\",\n                \"email\": \"fake@ema.il\",\n                \"dayPhone\": \"3105551222\",\n                \"eveningPhone\": \"3105551222\",\n                \"birthDate\": \"01-01-1981\",\n                \"socialSecurity\": \"333224445\"\n            },\n            \"personalAddress\": {\n                \"line1\": \"21 Jump Street\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"90210\",\n                \"country\": \"USA\"\n            },\n            \"businessInfo\": {\n                \"businessName\": \"dinhhuyen\",\n                \"ein\": \"584384656\",\n                \"phone\": \"5555555555\",\n                \"email\": \"test@email.co\",\n                \"url\": \"https://test.com\"\n            },\n            \"businessAddress\": {\n                \"line1\": \"21 Jump Streets\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"90210\",\n                \"country\": \"USA\"\n            },\n            \"bankInfo\": {\n                \"bankName\": \"Bank of Abundance\",\n                \"accountOwnership\": \"business\",\n                \"accountType\": \"checking\",\n                \"accountName\": \"Huyen's dinh\",\n                \"accountNumber\": \"2341234321\",\n                \"routingNumber\": \"026009593\"\n            },\n            \"verificationData\": {\n                \"ipAddress\": \"192.168.0.1\",\n                \"emailVerified\": true,\n                \"emailVerifiedTimestamp\": \"2016-01-31T11:16:07.234Z\",\n                \"signature\": \"Huyen dinh\",\n                \"signatureTimestamp\": \"2016-01-31T11:16:07.234Z\",\n                \"termsAccepted\": true\n            },\n\t\t\t\"threatMetrixPolicy\": \"Default\",\n\t\t\t\"threatMetrixSessionId\": \"01f50c4d1430a620a3b50005ffe98541\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/merchants",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"merchants"
							]
						},
						"description": "Use endpoint **POST** `/merchants` to set up a new merchant account.\n\nRequest Parameters:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. See Objects for more information. |\n| `type` | The type of transaction. This value must be \"merchants\". |\n| `attributes` | A key for grouping identification and payment information. |\n| `AVS` | The AVS mode to set merchant to. can be `Standard`, `Moderate`, or `Enhanced` |\n| `accountType` | The type of bank account (personal or business). **If set to business, enables and requires the businessInfo and businessAddress groupings.** |\n| `accountName` | The first and last name of the account holder, or if a business, use the business's name. **This is also the Statement Descriptor that customers will see on their bank** |\n| `personalInfo` | A key for grouping personal information. |\n| `firstName` | The merchant’s first name. |\n| `lastName` | The merchant’s last name. |\n| `email` | The merchant's email address. |\n| `dayPhone` | The merchant’s daytime contact number. |\n| `eveningPhone` | The merchant’s evening contact number. |\n| `birthDate` | The merchant’s date of birth. **USE 01-01-1981 FOR TEST ENVIRONMENT** |\n| `socialSecurity` | The merchant’s social security number. |\n| `personalAddress` | A key for grouping personal address information. |\n| `line1` | The personal street address. |\n| `line2` | A second line for street address information. |\n| `city` | The city where the individual is located. |\n| `state` | The state where the individual is located. See State and Province Codes for more information. |\n| `zip` | The postal code where the individual is located. |\n| `country` | The three-character country code. See Country Codes for more information. |\n| `businessInfo` | A key for grouping business information. |\n| `businessName` | The legal name of the business as registered. |\n| `ein` | The Employer Identification Number (EIN). |\n| `phone` | The Business Phone Number (Optional) |\n| `email` | The Business Email (Optional) |\n| `url` | The Business's website url (optional) |\n| `businessAddress` | A key for grouping business address information. |\n| `line1` | The business street address. |\n| `line2` | A second street address line. |\n| `city` | The city where the business is located. |\n| `state` | The state where the business is located. |\n| `zip` | The postal code where the business is located |\n| `country` | The three-character country code. |\n| `bankInfo` | A key for grouping banking information |\n| `bankName` | The name of the financial institution. |\n| `accountOwnership` | The valid values are Personal or Business. |\n| `accountType` | The type of bank account (Checking or Savings). |\n| `accountName` | The Account name attached to the bank account. (Either account holder's name, or the business name) |\n| `accountNumber` | The financial institution account number. It is required if boarding with primary bank on file. |\n| `routingNumber` | The bank routing number. This is required if the payment method is checking or savings. Test environment requires a real routing number. |\n| `verificationData` | A key for grouping server and timestamp information. |\n| `ipAddress` | The IP address used for the transaction. |\n| `emailVerified` | A true or false value. |\n| `emailVerifiedTimestamp` | The date and time the email was sent. |\n| `signature` | The first and last name of the customer. |\n| `signatureTimestamp` | The date and time the transaction was authorized. |\n| `termsAccepted` | A true or false value. |\n| `threatMatrixPolicy` | Defaults to `Default`, Policy to use for ThreatMetrix (optional) |\n| `threatMetrixSessionId` | A unique identifier (preferably uuidv4), previously used for ThreatMetrix Embed. See [here](https://drive.google.com/file/d/1Y5BwkSurmj1743Vt0_7TE6ZyHmZX48S8/view?usp=sharing) for ThreatMetrix documentation (optional) |\n\nReponse\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. See Objects for more information. |\n| `type` | The type of transaction. This value must be \"merchants\". |\n| `id` | A merchant identifier. This is the account where the split goes after the transaction settles. |"
					},
					"response": [
						{
							"name": "Test API-Create Merchant",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"merchants\",\n        \"attributes\": {\n        \t\"AVS\": \"Standard\",\n            \"accountType\": \"business\",\n            \"accountName\": \"Company Name\",\n            \"miscData\": \"\",\n            \"personalInfo\": {\n                \"firstName\": \"Doe\",\n                \"lastName\": \"Jane\",\n                \"email\": \"fake@ema.il\",\n                \"dayPhone\": \"3105551222\",\n                \"eveningPhone\": \"3105551222\",\n                \"birthDate\": \"01-01-1981\",\n                \"socialSecurity\": \"123456789\"\n            },\n            \"personalAddress\": {\n                \"line1\": \"21 Jump Street\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"90210\",\n                \"country\": \"USA\"\n            },\n            \"businessInfo\": {\n                \"businessName\": \"Legal Name LLC\",\n                \"ein\": \"123456789\",\n                \"phone\": \"5555555555\",\n                \"email\": \"test@email.co\",\n                \"url\": \"https://test.com\"\n            },\n            \"businessAddress\": {\n                \"line1\": \"21 Jump Streets\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"state\": \"CA\",\n                \"zip\": \"90210\",\n                \"country\": \"USA\"\n            },\n            \"bankInfo\": {\n                \"bankName\": \"Bank of Abundance\",\n                \"accountOwnership\": \"business\",\n                \"accountType\": \"checking\",\n                \"accountName\": \"Doe's dinh\",\n                \"accountNumber\": \"2341234321\",\n                \"routingNumber\": \"000000000\"\n            },\n            \"verificationData\": {\n                \"ipAddress\": \"192.168.0.1\",\n                \"emailVerified\": true,\n                \"emailVerifiedTimestamp\": \"2016-01-31T11:16:07.234Z\",\n                \"signature\": \"Huyen dinh\",\n                \"signatureTimestamp\": \"2016-01-31T11:16:07.234Z\",\n                \"termsAccepted\": true\n            },\n\t\t\t\"threatMetrixPolicy\": \"Default\",\n\t\t\t\"threatMetrixSessionId\": \"x\"\n        }\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{endpoint}}/merchants",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"merchants"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "194"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 19:27:02 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "2be3f72a-9b58-4948-a6f2-05bedc5c4956"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BXHgWGABvHcF7rw="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f8602-9a4f242824ba4744b4359c02;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 00f0a41f749793b9dd653153037c957e.cloudfront.net (CloudFront), 1.1 d1151317ba32afe0e6370fd69fed222e.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "x6zBnkh9k3uCL0KHN4TD48jwtfgEmEF9V621Mce2apeFEuIjXuCl3Q=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"type\": \"merchants\",\n        \"id\": \"merchantId\"\n    }\n}"
						}
					]
				},
				{
					"name": "Test API-Get Merchant by Id",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding"
							}
						],
						"url": {
							"raw": "{{endpoint}}/merchants/{{merchantId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"merchants",
								"{{merchantId}}"
							]
						},
						"description": "Use endpoint **GET**  `/merchants/{merchantId}` to view information about a specific merchant.\n\n### GET `/merchants/{merchantId}` Request\n\nNote: There are no request parameters for this endpoint.\n\nResponse:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. See Objects for more information. |\n| `id` | Merchant Identification string for Digitzs |\n| `type` | The type of transaction. This value must be \"merchants\". |\n| `attributes` | A key for grouping identification and payment information. |\n| `accountType` | The type of bank account (Checking or Savings). |\n| `accountName` | The first and last name of the account holder. |\n| `personalInfo` | A key for grouping personal information. |\n| `firstName` | The merchant’s first name. |\n| `lastName` | The merchant’s last name. |\n| `email` | The merchant's email address. |\n| `dayPhone` | The merchant’s daytime contact number. |\n| `eveningPhone` | The merchant’s evening contact number. |\n| `birthDate` | The merchant’s date of birth. |\n| `socialSecurity` | The merchant’s social security number. |\n| `personalAddress` | A key for grouping personal address information. |\n| `line1` | The personal street address. |\n| `line2` | A second line for street address information. |\n| `city` | The city where the individual is located. |\n| `state` | The state where the individual is located. See State and Province Codes for more information. |\n| `zip` | The postal code where the individual is located. |\n| `country` | The three-character country code. See Country Codes for more information. |\n| `businessInfo` | A key for grouping business information. |\n| `businessName` | The legal name of the business as registered. |\n| `ein` | The Employer Identification Number (EIN). |\n| `businessAddress` | A key for grouping business address information. |\n| `line1` | The business street address. |\n| `line2` | A second street address line. |\n| `city` | The city where the business is located. |\n| `state` | The state where the business is located. |\n| `zip` | The postal code where the business is located |\n| `country` | The three-character country code. |\n| `bankInfo` | A key for grouping banking information |\n| `bankName` | The name of the financial institution. |\n| `accountOwnership` | The valid values are Personal or Business. |\n| `accountType` | The type of bank account (Checking or Savings). |\n| `accountName` | The first and last name of the account holder or the business Name |\n| `accountNumber` | The financial institution account number. It is required if boarding with primary bank on file. |\n| `routingNumber` | The bank routing number. This is required if the payment method is checking or savings. |\n| `verificationData` | A key for grouping server and timestamp information. |\n| `ipAddress` | The IP address used for the transaction. |\n| `emailVerified` | A true or false value. |\n| `emailVerifiedTimestamp` | The date and time the email was sent. |\n| `signature` | The first and last name of the customer. |\n| `signatureTimestamp` | The date and time the transaction was authorized. |\n| `termsAccepted` | A true or false value. |"
					},
					"response": [
						{
							"name": "Test API-Get Merchant by Id",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding"
									}
								],
								"url": {
									"raw": "{{endpoint}}/merchants/{{merchantId}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"merchants",
										"{{merchantId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "1198"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 19:27:31 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "95fddeb5-2259-4d96-88c0-d9bff2d75335"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BXHlUExNvHcFZKQ="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f8621-8955804ef788973f10f670bf;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 490c6b39f412c738a30c226f07db749c.cloudfront.net (CloudFront), 1.1 d1151317ba32afe0e6370fd69fed222e.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO51-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "uIV2TSSZc4vpXXMf1wlCy-qTkpmoKXFDOxMtoTtbuP-wneU5wnI57g=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"type\": \"merchants\",\n        \"id\": \"merchantId\",\n        \"attributes\": {\n            \"accountName\": \"Tuan Ngoc\",\n            \"accountType\": \"business\",\n            \"personalInfo\": {\n                \"eveningPhone\": \"3105551222\",\n                \"firstName\": \"Tuan\",\n                \"lastName\": \"Ngoc\",\n                \"dayPhone\": \"1234564324\",\n                \"socialSecurity\": \"xxxx6789\",\n                \"birthDate\": \"xxxx2000\",\n                \"email\": \"Ngoc@centralfax.co.uk\"\n            },\n            \"bankInfo\": {\n                \"routingNumber\": \"xxxx9593\",\n                \"bankName\": \"VCB\",\n                \"accountNumber\": \"xxxx4567\",\n                \"accountName\": \"LuongDung\",\n                \"accountOwnership\": \"business\",\n                \"accountType\": \"savings\"\n            },\n            \"verificationData\": {\n                \"ipAddress\": \"192.168.100.14/23\",\n                \"emailVerified\": true,\n                \"signature\": \"LuongDung\",\n                \"emailVerifiedTimestamp\": \"2016-01-31T11:16:07.234Z\",\n                \"signatureTimestamp\": \"2016-01-31T11:16:07.234Z\"\n            },\n            \"created\": \"2019-09-26T08:15:12.752Z\",\n            \"partnerId\": \"corsourc-152910534\",\n            \"businessAddress\": {\n                \"zip\": \"90210\",\n                \"country\": \"USA\",\n                \"state\": \"CA\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"line1\": \"21 Jump Streets\"\n            },\n            \"personalAddress\": {\n                \"zip\": \"90210\",\n                \"country\": \"USA\",\n                \"state\": \"CA\",\n                \"line2\": \"Suite 007\",\n                \"city\": \"Los Angeles\",\n                \"line1\": \"21 Jump Street\"\n            },\n            \"businessInfo\": {\n                \"businessName\": \"TuanNgoc\",\n                \"ein\": \"xxxx6789\"\n            }\n        }\n    }\n}"
						}
					]
				},
				{
					"name": "Test API-Get Merchant List",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding"
							}
						],
						"url": {
							"raw": "{{endpoint}}/merchants?limit=25",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"merchants"
							],
							"query": [
								{
									"key": "limit",
									"value": "25",
									"description": "Limit's the amount of items that can be returned"
								}
							]
						},
						"description": "Use endpoint **GET** `/merchants?limit=20` to view a list of the merchants\n\nNote: There are no request parameters for this endpoint, Also change `limit` in the URI to whatever integer value of items you want to recieve.\n\nResponse:\n\n\n| Parameter | Description |\n| --- | --- |\n| `meta` | A key for grouping different types of API data. |\n| `items` | The number of items in the database. It is equal to or smaller than limit’s value. |\n| `limit` | The maximum number of results to return. |\n| `more` | A true/false value that indicates whether “items” or “limit” allows more results. |\n| `data` | A key for grouping results. |\n| `id` | The merchant identification string in Digitzs |\n| `attributes` | A key for grouping identification and payment information. |\n| `accountName` | The name of the individual or business associated with the account. |\n| `accountType` | The account type (Personal or Business). |\n| `created` | The date and time that the payment was created. |\n| `type` | The transaction type. Must equal “merchants”. |"
					},
					"response": [
						{
							"name": "Test API-Get Merchant List",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding"
									}
								],
								"url": {
									"raw": "{{endpoint}}/merchants?limit=25",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"merchants"
									],
									"query": [
										{
											"key": "limit",
											"value": "25",
											"description": "Limit's the amount of items that can be returned"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "4588"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 19:28:09 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "8f7b519e-63cb-472b-9cb6-02e5fb77791f"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BXHrgHD7PHcFkVA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f8649-56fdfeb09a03ccf092a93bd0;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 43fc53332a866a4c9b5c72cec114706b.cloudfront.net (CloudFront), 1.1 d1151317ba32afe0e6370fd69fed222e.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO51-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "ub3n6byZfdHJrQwm81BlAlszXQBVXhxH9BXqS20Xzm4xbEfaLEgufA=="
								}
							],
							"cookie": [],
							"body": "{\n    \"link\": {\n        \"self\": \"x\"\n    },\n    \"meta\": {\n        \"limit\": 25,\n        \"items\": 25,\n        \"more\": true\n    },\n    \"data\": [\n        {\n            \"id\": \"merchantId\",\n            \"attributes\": {\n                \"accountName\": \"Huyen Dinh\",\n                \"accountType\": \"business\",\n                \"created\": \"2019-10-10T19:27:00.680Z\"\n            },\n            \"type\": \"merchants\"\n        }\n    ]\n}"
						}
					]
				},
				{
					"name": "Test API-Put Update Merchant bankInfo",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"merchants\",\n        \"attributes\": {\n            \"group\": \"bankInfo\",\n            \"bankInfo\": {\n                \"country\": \"USA\",\n                \"bankName\": \"CitiBank\",\n                \"accountType\": \"checking\",\n                \"accountName\": \"Sara Bareilles\",\n                \"accountNumber\": \"4747474747474747\",\n                \"routingNumber\": \"026009593\"\n            }\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/merchants/{{merchantId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"merchants",
								"{{merchantId}}"
							]
						},
						"description": "Use endpoint **PUT** `/merchants/{merchantId}` to update the merchant's bank account (used for depositing their daily transactions)\n\nRequest:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. See Objects for more information. |\n| `type` | The type of transaction. This value must be \"merchants\". |\n| `attributes` | A key for grouping identification and payment information. |\n| `group` | Must be `bankInfo` for updating merchant's bank. Enables `bankInfo` group. |\n| `bankInfo` | A key for grouping banking information. |\n| `accountType` | The type of bank account (Checking or Savings). |\n| `accountName` | The first and last name of the account holder. |\n| `country` | The three-character country code. |\n| `bankName` | The name of the financial institution. |\n| `accountNumber` | The financial institution account number. It is required if boarding with primary bank on file. |\n| `routingNumber` | The bank routing number. This is required if the payment method is checking or savings. |"
					},
					"response": [
						{
							"name": "Test API-Put Update Merchant bankInfo",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"merchants\",\n        \"attributes\": {\n            \"group\": \"bankInfo\",\n            \"bankInfo\": {\n                \"country\": \"USA\",\n                \"bankName\": \"CitiBank\",\n                \"accountType\": \"checking\",\n                \"accountName\": \"Sara Bareilles\",\n                \"accountNumber\": \"4747474747474747\",\n                \"routingNumber\": \"026009593\"\n            }\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{endpoint}}/merchants/{{merchantId}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"merchants",
										"{{merchantId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "218"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 19:28:49 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "2ff585da-0112-40f6-a963-f4e9dc800096"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BXHxcG52vHcFd-A="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f866f-4147d4f69628f866f9db6ffa;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 2afae0d44e2540f472c0635ab62c232b.cloudfront.net (CloudFront), 1.1 d1151317ba32afe0e6370fd69fed222e.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "2rs4gf3GcAMIOAfAJE23_dda5T3UKGIMhwexK8r--U2-VOp8sJpENg=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"type\": \"merchants\",\n        \"id\": \"merchantId\"\n    }\n}"
						}
					]
				},
				{
					"name": "Test API-Put Update Merchant's AVS Mode",
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{appToken}}",
								"description": "appToken created by `/auth/token`",
								"type": "text"
							},
							{
								"key": "x-api-key",
								"value": "{{apiKey}}",
								"description": "API Key given during onboarding",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"value": "application/json",
								"description": "Optional, but REST Standard.",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"data\": {\n        \"type\": \"merchants\",\n        \"attributes\": {\n            \"group\": \"AVS\",\n            \"AVS\": \"Enhanced\"\n        }\n    }\n}"
						},
						"url": {
							"raw": "{{endpoint}}/merchants/{{merchantId}}",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"merchants",
								"{{merchantId}}"
							]
						},
						"description": "Use endpoint **PUT** `/merchants/{merchantId}` to update the AVS mode for the specified merchant.\n\nReplace {merchantId} with the Digitzs Merchant ID given during merchant creation.\n\nRequest:\n\n| Parameter | Description |\n| --- | --- |\n| `data` | A key for grouping different types of API data. See Objects for more information. |\n| `type` | The type of transaction. This value must be \"merchants\". |\n| `attributes` | A key for grouping identification and payment information. |\n| `group` | Must be `AVS` for updating merchant's AVS setting. Enables `AVS` key. |\n| `AVS` | The AVS mode to set merchant to. can be `Standard`, `Moderate`, or `Enhanced` |"
					},
					"response": [
						{
							"name": "Test API-Put Update Merchant's AVS Mode",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{appToken}}",
										"description": "appToken created by `/auth/token`",
										"type": "text"
									},
									{
										"key": "x-api-key",
										"value": "{{apiKey}}",
										"description": "API Key given during onboarding",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"name": "Content-Type",
										"description": "Optional, but REST Standard.",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"data\": {\n        \"type\": \"merchants\",\n        \"attributes\": {\n            \"group\": \"AVS\",\n            \"AVS\": \"Enhanced\"\n        }\n    }\n}"
								},
								"url": {
									"raw": "{{endpoint}}/merchants/{{merchantId}}",
									"host": [
										"{{endpoint}}"
									],
									"path": [
										"merchants",
										"{{merchantId}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json"
								},
								{
									"key": "Content-Length",
									"value": "218"
								},
								{
									"key": "Connection",
									"value": "keep-alive"
								},
								{
									"key": "Date",
									"value": "Thu, 10 Oct 2019 19:29:13 GMT"
								},
								{
									"key": "x-amzn-RequestId",
									"value": "98ecc485-27e3-40a4-a176-d713206a34c4"
								},
								{
									"key": "x-amz-apigw-id",
									"value": "BXH1fHeUvHcFvjA="
								},
								{
									"key": "X-Amzn-Trace-Id",
									"value": "Root=1-5d9f8689-da747840740ed47ce3b11e80;Sampled=0"
								},
								{
									"key": "Via",
									"value": "1.1 d83ae0e1ba84e92e58bc1efc23a0c653.cloudfront.net (CloudFront), 1.1 d1151317ba32afe0e6370fd69fed222e.cloudfront.net (CloudFront)"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Amz-Cf-Pop",
									"value": "HIO50-C1"
								},
								{
									"key": "X-Cache",
									"value": "Miss from cloudfront"
								},
								{
									"key": "X-Amz-Cf-Id",
									"value": "QERvhi3L6OoUT3ASQX69bJlx6N18gGDDbkiutw7HV8yIeBpqVSDXYg=="
								}
							],
							"cookie": [],
							"body": "{\n    \"links\": {\n        \"self\": \"x\"\n    },\n    \"data\": {\n        \"type\": \"merchants\",\n        \"id\": \"merchantId\"\n    }\n}"
						}
					]
				}
			],
			"description": "Use the merchant endpoints to store transaction data for your business partners. All headers are required.\n\n-   **List Merchants**. Used to obtain a list of merchants.\n-   **Create Merchant**. Used to set up a new merchant account.\n-   **Retrieve Merchant**. Used to find information about a specific merchant.\n\nEach of these endpoints is described below.\n\n| Merchant Endpoints |\n| --- |\n| **GET** `/merchants` |\n| **POST** `/merchants` |\n| **GET** `/merchants/{id}` |",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}